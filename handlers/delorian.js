const Markup = require('telegraf/markup');
const {correctTime, formatDate} = require('../utils/dateTransform');
const Scene = require('telegraf/scenes/base');
const {DelorianModel} = require('../models/schemas');
const {userMongoListener} = require('../utils/mongoDB/mongoListener');

let mess = {};
const replys = (ctx) => {
    ctx.deleteMessage(ctx.message.message_id);
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Delorian, —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?', Markup.inlineKeyboard([
        Markup.callbackButton('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–µ', 'sendFuture')
    ]).extra())
        .then(ctx_then =>{
            mess['chat_id'] = ctx_then.chat.id;
            mess['message_id'] = ctx_then.message_id;
            return userMongoListener(ctx);
        })
        .then((res) => {
            mess['gmt'] = res.gmt;
        })
        .catch(err => console.log(err));
    return new Promise((res,rej)=>{
        res(ctx);
    })
};

const sendFutureScene = new Scene('sendFuture');
    sendFutureScene.enter(ctx => {
        console.log(mess);
        timerExit(ctx);   // –µ—Å–ª–∏ 3 –º–∏–Ω—É—Ç—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–µ—à—å, –∞–≤—Ç–æ–≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
        ctx.telegram.editMessageText(mess.chat_id, mess.message_id, null, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', Markup.inlineKeyboard([
                Markup.callbackButton('–í—ã–π—Ç–∏', 'exitScene')]).extra())
                    .then(ctx_then => {
                        mess['chat_id'] = ctx_then.chat.id;
                        mess['message_id'] = ctx_then.message_id;
                        console.log(mess);
                    })
                    .catch(err => {
                        if (err.code === 400) {
                            ctx.answerCbQuery('–≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ /delorian –µ—â–µ —Ä–∞–∑', false);
                        }
                    })
                }
    );
    sendFutureScene.on('text', ctx => {
        if(!ctx.message.text.match(/\d{1,2}\.\d{1,2}\.\d{4}\s–≤\s\d{1,2}\.\d{1,2}/g)) {
            ctx.deleteMessage(ctx.message.message_id)
                .then((aaa)=> {
                    ctx.telegram.editMessageText(mess.chat_id, mess.message_id, null, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß.–ú–ú', Markup.inlineKeyboard([
                        Markup.callbackButton('–í—ã–π—Ç–∏', 'exitScene')]).extra())
                        .then(ctx_then => {
                            mess['chat_id'] = ctx_then.chat.id;
                            mess['message_id'] = ctx_then.message_id;
                            mess['text'] = ctx_then.text;
                        })
                        .catch(err =>{
                            if (err.on.payload.text === mess.text) { // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å
                                console.log('–¢–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è');
                            }
                        })
            });
        } else {
            let time = correctTime(ctx.message.text, mess.gmt);
            if (time) {
                let date = formatDate(time); // –ó–∞–ø–∏—à–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß.–ú–ú
                mess['time'] = `${date.date}.${date.month}.${date.year} ${date.hours}.${date.min}`;
                ctx.scene.enter('enteringText');     //–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –í–í–û–î–ê –¢–ï–ö–°–¢–ê
                console.log('Exiting Scene 1');
                ctx.scene.leave();
            } else {
                ctx.telegram.editMessageText(mess.chat_id, mess.message_id, null, '–í –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π —è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é. –ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥–∏—Ç–µ `/delorian`')
                    .then(ctx_then => {
                        mess['chat_id'] = ctx_then.chat.id;
                        mess['message_id'] = ctx_then.message_id;
                        ctx.scene.leave();
                    })
                    .catch(err =>{
                        if (err.on.payload.text === mess.text) { // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å
                            console.log('–¢–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è');
                        }
                    })
                
            }

            
        }
    });

const enteringText = new Scene('enteringText');
enteringText.enter(ctx => {
    ctx.deleteMessage(ctx.message.message_id);
    ctx.telegram.editMessageText(mess.chat_id, mess.message_id, null, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç', Markup.inlineKeyboard([
            Markup.callbackButton('–í—ã–π—Ç–∏', 'exitScene')]).extra())
                .then(ctx_then =>{
                    mess['chat_id'] = ctx_then.chat.id;
                    mess['message_id'] = ctx_then.message_id;
                    console.log(mess);
                })
            }
);
enteringText.on('text', ctx => {
    ctx.deleteMessage(ctx.message.message_id);
    ctx.telegram.editMessageText(mess.chat_id, mess.message_id, null, '–£–≤–∏–¥–∏–º—Å—è –≤ –±—É–¥—É—â–µ–º')
        .then(ctx_then => {
        let futureMessage = new DelorianModel( {
                chatId: ctx.chat.id,
                userId: 123,
                messageId: ctx.message.message_id,
                remindTime: mess.time,
                text: ctx.message.text,
                performed: false
            });
            futureMessage.save((err, futureMessage)=>{
                if (err) console.error(err);
            })
            console.log('Exiting Scene 2');
            ctx.scene.leave();
        })
    }
);

function timerExit(ctx) {
    const ctxSec = ctx;
    let fiveMinutes = setTimeout(function(ctxSec){
        ctx.scene.leave();
        console.log('–í—ã—Ö–æ–∂—É –∏–∑ —Å—Ü–µ–Ω—ã');
        ctx.telegram.editMessageText(ctxSec.callbackQuery.message.chat.id, ctxSec.callbackQuery.message.message_id, null, '–í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /delorian');
        clearTimeout(fiveMinutes);
    }, 1000 * 60 * 3, ctxSec);
}

module.exports = {
    sendFutureScene,
    enteringText,
    replys
};

const Telegraf = require('telegraf');
const rateLimit = require('telegraf-ratelimit');
const Stage = require('telegraf/stage');
const session = require('telegraf/session');
const redis = require('redis');
const redisPromise = require('./utils/redisPromise');
const RedisEmmiter = require('node-redis-pubsub');
const MongoInit = require('./utils/mongoDB/mongoInit');
const actions = require('./actions');
const {dlMongoListener, addChatMongoListener, userMongoListener} = require('./utils/mongoDB/mongoListener');
const tmzEditor = require('./utils/tmzEditor');
const errorHandler = require('./utils/errorHandler');
const {etiquette, weatherApp, getArticle, delorian, respect, postme} = require('./handlers');

const redisEmmiter = new RedisEmmiter({
  port: 6379,
  scope: 'demo'  
});

const redisClient = redis.createClient()
  .on('connect', () => {
  console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î "redis" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  })
  .on('error', (err) => {
    throw err
  })

require('dotenv').config();


const db = new MongoInit({
  path: process.env.MONGODB_URI,
  auth: {
    name: process.env.MONGODB_USER,
    pwd: process.env.MONGODB_PWD
  }
});

const bot = new Telegraf(process.env.TELETOKEN_DEV, {channelMode: true} );
const stage = new Stage();

const limitConfig = {
  window: 1000,
  limit: 1,
  onLimitExceeded: (ctx) => {
    if (ctx.callbackQuery) {
      ctx.answerCbQuery('–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ —á–∞—Å—Ç–æ –∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É');
      return;
    }
  }
};
bot.use(rateLimit(limitConfig));
bot.use(session({
  getSessionKey: (ctx) => {
    if (ctx.chat.type === 'channel') {
      return `${ctx.chat.id}` 
    }
    return ctx.from && ctx.chat && `${ctx.from.id}:${ctx.chat.id}`;
  }
}));
bot.use(stage.middleware());

bot.context.redis = {...redisPromise( redisClient ), redisEmmiter};

actions.sendToRegister.forEach(scene => { //—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã –∏–∑ actions.js
  stage.register(scene);
})

bot.on( 'message', (ctx, next) => {
  if (ctx.from.id === +process.env.SHEN_VISOR) {
    postme.replys(ctx, 'receiving–°ontent');
  }
  return next(ctx)
})

bot.use((ctx, next) => {
  ctx.getChat(ctx.chat.id)
    .then( thisChat => {
      addChatMongoListener(thisChat, ctx)
        .then( msg => console.log(msg));
    });
  userMongoListener(ctx)
  .then( thisUser => {
    if (typeof(thisUser) === 'string') {
      console.log(thisUser);
    }
  })
  .catch( err => {
    console.log(err)
  });
  const start = new Date();  
  return next(ctx).then(() => {
    const ms = new Date() - start;
    console.log('Response time %sms', ms);

  });
});

bot.on('left_chat_member', etiquette);
bot.on('new_chat_members', etiquette);

bot.hears(/^(—Å|–°)—Ç–∞—Ç—å—è (.+)/, getArticle);
bot.hears(/^(–ø|–ü)–æ–≥–æ–¥–∞ [–∞-—è–ê-–Øa-zA-Z-]+/, weatherApp );

bot.command('delorian', ctx => {
  delorian.replys(ctx);
});

bot.hears(/\/postme (.+)/, (ctx) => {
  postme.replys(ctx);

});
bot.command('postme', (ctx) => {
  postme.replys(ctx, 'content');
});

bot.hears(/\/respect (.+)/, (ctx) => {
  respect(ctx, bot);
});
bot.hears(/\/tmz\s(.+)/, (ctx) => {
  tmzEditor(ctx);
});
bot.hears(/^@error/, (ctx) => {
  let message = (ctx.message.text).split('=')[1];
  message = JSON.parse(message);
  errorHandler(message, ctx);
});

bot.command('help', ctx => {
  ctx.Greply(`
  –ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ <i>Shen</i>ü§ñ.\n
  –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –≤ üó£–≥—Ä—É–ø–ø–µ –∏–ª–∏ üì£–∫–∞–Ω–∞–ª–µ - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã. –¢–∞–∫–æ–≤–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ <i>Telegram</i>.
  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+3 (–≥. –ú–æ—Å–∫–≤–∞).  –ï—Å–ª–∏ –≤—ã –≤ –¥—Ä—É–≥–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <code>/tmz +\\-—á–∏—Å–ª–æ</code>. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.\n
  <b>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n
  1. <code>/delorian</code> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–µ (–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞).\n
  2. <code>/respect</code> <i>—Ç–µ–∫—Å</i> - –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ –∫ <i>—Ç–µ–∫—Å—Ç—É</i>.\n
  3. <code>–°—Ç–∞—Ç—å—è</code> <i>—Ä–µ—Å—É—Ä—Å</i> - –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ–∂–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Å—Ç–∞—Ç—å–∏ (–≤–±–µ–π –≤–º–µ—Å—Ç–æ <i>—Ä–µ—Å—É—Ä—Å–∞</i> "—Å–ø–∏—Å–æ–∫" –∏–ª–∏ "list" ‚Äì –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ—á–Ω—è —Ä–µ—Å—É—Ä—Å–æ–≤).\n
  4. <code>/postme</code> - —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤, –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É\\–∫–∞–Ω–∞–ª –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–µ–º —Å–∞–º—ã–º –¥–µ–ª—è—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—à–∏ "<code>/postme options</code>". –ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–µ ${process.env.NAME_SHEN_VISOR}, –æ–Ω –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n
  –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∫ @dezamat .\n
  5. <code>–ü–æ–≥–æ–¥–∞</code> <i>–≥–æ—Ä–æ–¥</i> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.
  `, Telegraf.Extra.HTML(true));
})
bot.command('start', ctx => {
  dlMongoListener(ctx);
})



bot.on('callback_query', actions.callbackQuerys);


bot.catch((err) => {
  console.log('Ooops', err);
});

bot.launch();


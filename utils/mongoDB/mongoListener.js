const {correctTime, formatDate} = require('../dateTransform');
const articleParser = require('../articleParser');
const Markup = require('telegraf/markup');
const {DelorianModel, RespectModel, ArticleModel, UserModel, ChatModel} = require('../../models/schemas');
const handlerMessages = require('../handlerMessages');

const dlMongoListener = function(ctx){
    setInterval(() => { // –ª—É—à–∞–µ–º delorian
        let nowDate = formatDate(new Date());
        nowDate = `${nowDate.date}.${nowDate.month}.${nowDate.year} ${nowDate.hours}.${nowDate.min}`;
        DelorianModel.findOne({remindTime: nowDate},(err, res) =>{
            if(err) return;
            try {
                if(!res.performed) {
                    console.log(res.performed);
                    ctx.telegram.sendMessage(res.chatId, res.text);
                    res.performed = true;
                    res.save((err)=>{
                        if (err) console.error(err);
                    })
                }
            } catch(e) {};
        });
    }, 1000);
};
const respectMongoListener = function(ctx) {
    let thisChatId = ctx.chat.id;                          // –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    let thisMessId = ctx.callbackQuery.message.message_id;
    let rate = ctx.callbackQuery.data; // –î–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if(rate == 'like' || rate == 'dislike') {
        RespectModel.findOne({chatId: thisChatId, messageId: thisMessId},(err, res) =>{
            if (err || res === null) {console.log(err); return;}
            res[rate]++;
            ctx.telegram.editMessageText(res.chatId, res.messageId, null, res.text, Markup.inlineKeyboard([
                Markup.callbackButton(`üëç ${res.like}`, 'like'),
                Markup.callbackButton(`üëé ${res.dislike}`, 'dislike')
            ]).extra())
                .catch(err =>{
                    if (err.on.payload.text === res.text) { // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å
                        console.log('–¢–µ–∫—Å –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è');
                    }
                })
            res.save((err)=>{
                if (err) console.error(err);
            });
        })
        .catch();
            
    }
    
};
const articleMongoListener = function(reqResourse, parser) {
    if (reqResourse) {
        const azaza = new Promise( (resolve, rej) => {
            ArticleModel.findOne({resourse: reqResourse}, (err, res) => {
                if(err) {console.log(err); return;};
                if (res) {
                    resolve(res.data)
                } else {
                    parser()
                        .then( result => {
                            let newRes = new ArticleModel({
                                resourse: reqResourse,
                                data: result,
                                funcName: parser.name,
                                date: new Date()
                            });
                            newRes.save((err)=>{
                                if (err) console.error(err);
                                resolve();
                            })
                            
                        })
                        .catch(err => {
                            rej(err);
                        })         
                }
            });
        });
        return new Promise((resolve, rej) => {
            azaza.then(() => {
                ArticleModel.findOne({resourse: reqResourse}, (err, res) => {
                    resolve(res.data)
                });
            })
            .catch(err => {
                rej(err);
            }); 
        })

    };

    setInterval( () => {    //–Ω–∞–º –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑ –≤ —á–∞—Å, –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –ë–î
        ArticleModel.find((err, res) =>{
            if(err) return;
            for (item of res) {;
                let resourse = item.resourse;
                let funcName = item.funcName
                console.log(`–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏—Ç—å "${resourse.toUpperCase()}"`);
                new Promise( (resolve, reject) => {
                    const newItem = item;   // –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    articleParser[funcName]()
                    .then( result => {
                        newItem.data = result;
                        newItem.date = new Date();
                        newItem.save((err)=>{
                            if (err) console.error(err);
                            resolve();
                        })
                    })
                
                })
                
            }
        });
    }, 1000 * 60 * 60 * (Math.floor(Math.random() * (2)) + 1)) // –ü–∞—Ä—Å–∏–º —Ä–∞–∑ –≤ —á–∞—Å/–¥–≤–∞ 

}
const userMongoListener = function(ctx, params) {
    return new Promise ((resolve, rej) => {
        if ( !ctx.from ) rej( `–í ${ctx.chat.title} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –î–ë –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ` );
        UserModel.findOne({userId: ctx.from.id}, (err, res) =>{
            if (err) {console.log(err); return;}
            if (res) {resolve(res)};
            if (res === null) {
                const newUser = new UserModel({
                    firstName: ctx.from.first_name,
                    userName: ctx.from.username || ctx.from.first_name,
                    userId: ctx.from.id,
                    isBot: ctx.from.is_bot,
                    lang: ctx.from.language_code,
                });
                newUser.save((err, savedUser)=>{
                    if (err) console.error(err);
                    resolve(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${savedUser.userName}`);
                })
            }
        })
    });
}
const postmeMongoListener = function(ctx, params) {

    if (params.getMsgTypes) {
        return new Promise( (resolve, rej) => {
            ChatModel.findOne({chatID: ctx.chat.id}, (err, res) =>{
                if (err || res === null) {console.log(err || 'error'); return};
                switch(params.getMsgTypes) {
                    case 'current':
                        resolve(res.postme.mediaTypes);
                        return;
                    case 'all':
                        res.postme.mediaTypes.links = false;
                        res.postme.mediaTypes.video = false;
                        res.postme.mediaTypes.photo = false;
                        res.postme.mediaTypes.audio = false;
                        res.postme.mediaTypes.all = !res.postme.mediaTypes.all; 
                        break;
                    case 'photo':
                        res.postme.mediaTypes.all = false; 
                        res.postme.mediaTypes.photo = !res.postme.mediaTypes.photo; 
                        break;
                    case 'video':
                        res.postme.mediaTypes.all = false; 
                        res.postme.mediaTypes.video = !res.postme.mediaTypes.video; 
                        break;
                    case 'links':
                        res.postme.mediaTypes.all = false; 
                        res.postme.mediaTypes.links = !res.postme.mediaTypes.links; 
                        break;
                    case 'audio':
                        res.postme.mediaTypes.all = false; 
                        res.postme.mediaTypes.audio = !res.postme.mediaTypes.audio; 
                        break;
                };
                res.save((err, savedRes)=> {
                    if (err) {console.log(err); return};
                    resolve(savedRes.postme.mediaTypes);
                });
            });
        });
    };

    if (params.getPost) {
        return new Promise( (resolve, rej) => {
            if(params.getPost === 'sendPost') {
                ChatModel.findOne({chatID: ctx.chat.id}, (err, res) =>{
                    if (err || res === null) {console.log(err || 'error'); return};
                    if (res.postme.listening === 0) {
                        resolve('–°–Ω–∞—á–∞–ª–∞ –≤–µ–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫. <b>–í–≤–µ–¥–∏—Ç–µ</b> <code>/postme options</code>')
                    } else {
                        ChatModel.findOne({chatID: res.postme.listening}, (err, res) =>{
                            if (err) {console.log(err); return};
                            resolve(res.postme.content);
                        });
                    }
                });
            }
            if (params.getPost === 'getMediatypes') {
                ChatModel.findOne({chatID: ctx.chat.id}, (err, res) =>{
                    if (err || res === null) {console.log(err || 'error'); return};
                    resolve(res.postme.mediaTypes);
                });
            };
        });
    }

    if (params.listening) {
        return new Promise( (resolve, rej) => {
            ChatModel.findOne({chatID: ctx.chat.id}, (err, res) =>{ // –º–µ–Ω—è–µ–º —Ä–µ—Å—É—Ä—Å –Ω–∞ –Ω–æ–≤—ã–π
                if (err) {console.log(err); return};
                const oldestResource = res.postme.listening;
                res.postme.listening = params.listening;
                res.save((err)=> {
                    if (err) {console.log(err); return};
                });

                ChatModel.findOne({chatID: oldestResource}, (err, resp) =>{ // —É–±–µ—Ä–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—ã–π —Ä–µ—Å—É—Ä—Å
                    if (err) {console.log(err); return};
                    if (oldestResource !== 0) { // —Å—Ç–∞—Ä—ã–π —Ä–µ—Å—É—Ä—Å –±—É–¥–µ—Ç 0 –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—É—à–∞–ª
                        resp.postme.listeners = resp.postme.listeners.filter( item => {
                            return item !== ctx.chat.id;
                        });
                        resp.save( (err)=> {
                            if (err) {console.log(err); return};
                        });
                    };
                });

                ChatModel.findOne({chatID: params.listening}, (err, resp) =>{ // –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å
                    if (err) {console.log(err); return};
                    resp.postme.listeners.push(ctx.chat.id);
                    resp.save( (err)=> {
                        if (err) {console.log(err); return};
                        resolve(`–†–µ—Å—É—Ä—Å \"${resp.title || resp.username}\" —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!`)
                    });
                });
            });
            
            
        });
        
    }

    if (params.selected) {
        return new Promise( (resolve, rej) => {
            ChatModel.find({"postme.resourseActive": true}, (err, res) =>{
                if (err) {console.log(err); return};
                if (res === null || res.length === 0) {
                    resolve(false);
                } else {
                    resolve(res);
                };
            });
        });
        
    };

    if (params.adding) {
        return new Promise( (resolve, rej) => {
            ChatModel.findOne({chatID: ctx.chat.id}, async (err, res) =>{ // "postme.resourseActive": false}
                if (err) {console.log(err); return};
                if (params.privateProblem) {
                    res.postme.resourseActive = false;
                    res.markModified('postme');
                    res.save((err, data)=>{
                        if (err) console.error(err);
                        resolve(`–î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—ë –≤ –±–∞–∑—É, –¥–æ–±–∞–≤—å—Ç–µ –∫ —Å–µ–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${process.env.NAME_SHEN_VISOR}`);
                    });
                    return;
                }
                if (res.postme.resourseActive === true) {
                    resolve(`–ß–∞—Ç —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                    return;
                };
                const userbotInGroup = await ctx.telegram.getChatMember(ctx.chat.id, process.env.SHEN_VISOR);
                if ( res.private === true && (userbotInGroup.status === "left" || userbotInGroup.status === "kicked") ) {
                    resolve(`–î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—ë –≤ –±–∞–∑—É, –¥–æ–±–∞–≤—å—Ç–µ –∫ —Å–µ–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${process.env.NAME_SHEN_VISOR}`);
                    return;
                };
                res.postme.resourseActive = true;
                ctx.telegram.sendMessage(process.env.SHEN_VISOR, `@scrapChat={"chatID":${res.chatID}, "maxMsgId":${res.maxMsgId}}`)
                res.save((err)=>{
                    if (err) console.error(err);
                    resolve('–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
                });
            });
        
        });
    };

    if (params.delete) {
        return new Promise ( (resolve, rej) => {
            ChatModel.find((err, res) =>{
                if (err) {console.log(err); return};
                res.forEach( item => {
                    if (item.postme.listening === ctx.chat.id){ 
                        item.postme.listening = 0;
                    };
                    item.save();
                });
            });

            ChatModel.findOne( {chatID: ctx.chat.id}, (err, res) =>{
                if (err) {console.log(err); return};
                res.postme.listeners = [];
                res.save();
            });

            ChatModel.findOne({chatID: ctx.chat.id}, (err, res) =>{
                if (err) {console.log(err); return};
                if (res.postme.resourseActive === false) {resolve(false); return};
                res.postme.resourseActive = false;
                res.postme.content = {};
                res.save(err => {
                    if (err) {console.log(err); return};
                    resolve(true);
                });
            });
        });
    };
};

const addChatMongoListener = function(chat, ctx) {
    return new Promise( (resolve, rej) => {
        ChatModel.findOne({chatID: chat.id}, async (err, res) =>{
            if (err) {console.log(err); return};
            let privateOrNot = await ctx.getChat();
            privateOrNot = privateOrNot.username ? false : true;
            if (res === null) {
                const newChat = new ChatModel({
                    chatID: chat.id,
                    description: chat.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                    photoLogo: chat.photo,
                    title: chat.title,
                    chatType: chat.type,
                    username: chat.username || '–ë–µ–∑ –∏–º–µ–Ω–∏',
                    maxMsgId: returnMsgId(ctx),
                    private: privateOrNot,
                    listening: [],   
                });
                newChat.save((err, futureMessage)=>{
                    if (err) console.error(err);
                    resolve(`${chat.type} ${chat.title || chat.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É`);
                });
            };
            if (res) {
                res.description = chat.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
                res.photoLogo = chat.photo;
                res.title = chat.title;
                res.chatType = chat.type;
                res.username = chat.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                res.private = privateOrNot;
                if (returnMsgId(ctx)) {
                    res.maxMsgId = returnMsgId(ctx);
                };
                try {
                    addNewContent(ctx, res.postme.content);
                } catch (e) {
                    console.log(err)
                }
                res.markModified('postme.content');
                res.save((err, futureMessage)=>{
                    if (err) console.error(err);
                    resolve(`${chat.type} ${chat.title || chat.username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                });
            }
        });
    });
    
    
}

function returnMsgId(ctx) {
    const msgChannel = ctx.message ? ctx.message.message_id : false;
    const msgGroup = ctx.channelPost ? ctx.channelPost.message_id : false;
    return msgGroup || msgChannel
};
function addNewContent(ctx, db) { /* content, messageId, allContent */
    if (ctx.callbackQuery) return; // –° –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–≤–æ–ª–µ–Ω–∏—è —Å–æ–±–∏—Ä–∞—Ç—å –Ω–µ –±—É–¥–µ–º
    const message = ctx.channelPost ? ctx.channelPost : ctx.message;
    if (message.photo) {
        handlerMessages.messagePhoto(message, message.message_id, db);
        return
    };
    if (message.animation) {
        handlerMessages.messageAnimation(message, message.message_id, db);
        return
    }
    if (message.text) {
        handlerMessages.messageText(message, message.message_id, db);
        return
    }
    if (message.video) {
        handlerMessages.messageVideo(message, message.message_id, db);
        return
    }
    if (message.video_note) {
        handlerMessages.messageVideoNote(message, message.message_id, db);
        return
    }
    if (message.voice) {
        handlerMessages.messageVoiceNote(message, message.message_id, db);
        return
    }
    if (message.audio) {
        handlerMessages.messageAudio(message, message.message_id, db);
        return
    }
    
}

module.exports = {
    dlMongoListener,
    respectMongoListener,
    articleMongoListener,
    userMongoListener,
    postmeMongoListener,
    addChatMongoListener
};